generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  exams     Exam[]    @relation("CreatedExams")
  attempts  Attempt[]
}

model Exam {
  id         String     @id @default(uuid())
  title      String
  duration   Int        // in minutes
  description String
  questions  Question[]
  createdBy  User       @relation("CreatedExams", fields: [createdById], references: [id])
  createdById String
  attempts   Attempt[]
}

model Question {
  id          String    @id @default(uuid())
  text        String
  options     Option[]
  exam        Exam      @relation(fields: [examId], references: [id])
  examId      String
  isGenerated Boolean   @default(false)
}

model Option {
  id         String     @id @default(uuid())
  text       String
  isCorrect  Boolean
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  answers    Answer[]   // Reverse relation from Answer
}

model Attempt {
  id        String     @id @default(uuid())
  exam      Exam       @relation(fields: [examId], references: [id])
  examId    String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  startedAt DateTime   @default(now())
  endedAt   DateTime?
  score     Int?
  answers   Answer[]
}

model Answer {
  id               String   @id @default(uuid())
  attempt          Attempt  @relation(fields: [attemptId], references: [id])
  attemptId        String

  selectedOption   Option   @relation(fields: [selectedOptionId], references: [id])
  selectedOptionId String

  createdAt        DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}